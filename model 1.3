{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7TGrPKQrZGFeL+pMjf+Ih"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, median_absolute_error\n","import xgboost as xgb\n","import chardet\n","import re\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# Function to clean funding amounts\n","def clean_funding_amount(amount):\n","    if pd.isna(amount):\n","        return np.nan\n","    if isinstance(amount, (int, float)):\n","        return amount\n","\n","    amount_str = str(amount).strip()\n","    if re.match(r'^\\d{1,2},\\d{2},\\d{3}$', amount_str):\n","        parts = amount_str.split(',')\n","        if len(parts) == 3:\n","            lakhs = int(parts[0])\n","            thousands = int(parts[1])\n","            remainder = int(parts[2])\n","            return (lakhs * 100000) + (thousands * 1000) + remainder\n","\n","    clean_str = amount_str.replace(',', '')\n","    try:\n","        return float(clean_str)\n","    except (ValueError, TypeError):\n","        return np.nan\n","\n","# Function to identify outliers\n","def identify_outliers(data, column, threshold=3):\n","    mean = data[column].mean()\n","    std = data[column].std()\n","    z_scores = (data[column] - mean) / std\n","    return data[abs(z_scores) > threshold].index\n","\n","# Load dataset with encoding detection\n","filename = \"D1.csv\"\n","with open(filename, 'rb') as f:\n","    result = chardet.detect(f.read())\n","    encoding_used = result['encoding']\n","\n","try:\n","    df = pd.read_csv(filename, encoding=encoding_used)\n","except UnicodeDecodeError:\n","    for encoding in ['utf-8', 'latin1', 'windows-1252', 'utf-16']:\n","        try:\n","            df = pd.read_csv(filename, encoding=encoding)\n","            encoding_used = encoding\n","            break\n","        except UnicodeDecodeError:\n","            continue\n","    else:\n","        raise Exception(\"All encoding attempts failed.\")\n","\n","# Standardize column names\n","df.columns = df.columns.str.strip().str.lower()\n","\n","# Map common column names\n","column_mapping = {\n","    \"funding_total_usd\": \"funding_total_usd\",\n","    \"total_funding\": \"funding_total_usd\",\n","    \"funding_amount\": \"funding_total_usd\",\n","    \"founded_at\": \"founded_at\",\n","    \"market\": \"market\",\n","    \"country_code\": \"country_code\",\n","    \"funding_rounds\": \"funding_rounds\",\n","    \"category_list\": \"category_list\",\n","    \"state_code\": \"state_code\",\n","    \"city\": \"city\",\n","    \"first_funding_at\": \"first_funding_at\",\n","    \"last_funding_at\": \"last_funding_at\"\n","}\n","\n","for old_name, new_name in column_mapping.items():\n","    if old_name in df.columns:\n","        df.rename(columns={old_name: new_name}, inplace=True)\n","\n","# Convert funding to numeric\n","df[\"funding_total_usd\"] = df[\"funding_total_usd\"].apply(clean_funding_amount)\n","df[\"funding_rounds\"] = pd.to_numeric(df[\"funding_rounds\"], errors='coerce')\n","\n","# Time-based features\n","df[\"founded_at\"] = pd.to_datetime(df[\"founded_at\"], errors='coerce')\n","df[\"first_funding_at\"] = pd.to_datetime(df[\"first_funding_at\"], errors='coerce')\n","df[\"last_funding_at\"] = pd.to_datetime(df[\"last_funding_at\"], errors='coerce')\n","\n","df[\"years_since_founded\"] = (pd.to_datetime(\"today\") - df[\"founded_at\"]).dt.days / 365.25\n","df[\"time_to_first_funding\"] = (df[\"first_funding_at\"] - df[\"founded_at\"]).dt.days / 365.25\n","df[\"funding_duration\"] = (df[\"last_funding_at\"] - df[\"first_funding_at\"]).dt.days / 365.25\n","\n","# Advanced features\n","df[\"funding_velocity\"] = df[\"funding_rounds\"] / df[\"funding_duration\"].replace(0, 0.1)\n","df[\"avg_funding_per_round\"] = df[\"funding_total_usd\"] / df[\"funding_rounds\"].replace(0, 1)\n","df[\"funding_per_year\"] = df[\"funding_total_usd\"] / df[\"years_since_founded\"].replace(0, 0.1)\n","df[\"quick_funding\"] = (df[\"time_to_first_funding\"] < 1).astype(int)\n","\n","# Location features\n","if \"state_code\" in df.columns:\n","    df[\"has_state\"] = df[\"state_code\"].notna() & (df[\"state_code\"] != \"\")\n","else:\n","    df[\"has_state\"] = False\n","\n","if \"country_code\" in df.columns:\n","    country_counts = df[\"country_code\"].value_counts()\n","    common_countries = country_counts[country_counts >= 100].index\n","    df[\"country_group\"] = df[\"country_code\"].apply(lambda x: x if x in common_countries else \"OTHER\")\n","\n","# Market features\n","if \"market\" in df.columns:\n","    df[\"market_main\"] = df[\"market\"].fillna(\"\").astype(str).apply(lambda x: x.split()[0] if len(x.split()) > 0 else \"Unknown\")\n","    tech_markets = ['Software', 'Mobile', 'Internet', 'Enterprise', 'Web', 'Cloud', 'SaaS', 'AI', 'Machine']\n","    health_markets = ['Health', 'Medical', 'Healthcare', 'Biotech', 'Pharma']\n","    finance_markets = ['Finance', 'FinTech', 'Insurance', 'Banking', 'Investment']\n","\n","    def categorize_market(market):\n","        if market in tech_markets:\n","            return 'Tech'\n","        elif market in health_markets:\n","            return 'Health'\n","        elif market in finance_markets:\n","            return 'Finance'\n","        else:\n","            return 'Other'\n","\n","    df['market_sector'] = df['market_main'].apply(categorize_market)\n","\n","# Handle infinities and NaNs\n","df.replace([np.inf, -np.inf], np.nan, inplace=True)\n","df[\"funding_rounds\"] = df[\"funding_rounds\"].fillna(0)\n","df[\"years FS\"] = df[\"years_since_founded\"].fillna(df[\"years_since_founded\"].median())\n","df[\"time_to_first_funding\"] = df[\"time_to_first_funding\"].fillna(0)\n","df[\"funding_duration\"] = df[\"funding_duration\"].fillna(0)\n","df[\"funding_velocity\"] = df[\"funding_velocity\"].fillna(0)\n","df[\"avg_funding_per_round\"] = df[\"avg_funding_per_round\"].fillna(0)\n","df[\"funding_per_year\"] = df[\"funding_per_year\"].fillna(0)\n","\n","# Filter valid funding data and remove outliers\n","df_filtered = df[df[\"funding_total_usd\"] > 0].copy()\n","outlier_idx = identify_outliers(df_filtered, \"funding_total_usd\", threshold=4)\n","df_cleaned = df_filtered.drop(outlier_idx)\n","\n","# Define features\n","features = [\n","    \"country_group\", \"market_sector\", \"funding_rounds\", \"years_since_founded\",\n","    \"time_to_first_funding\", \"funding_duration\", \"funding_velocity\",\n","    \"avg_funding_per_round\", \"funding_per_year\", \"quick_funding\", \"has_state\"\n","]\n","\n","for feature in features:\n","    if feature not in df_cleaned.columns:\n","        df_cleaned[feature] = 0\n","\n","# Prepare data\n","X = df_cleaned[features].copy()\n","y = np.log1p(df_cleaned[\"funding_total_usd\"])  # Log transform target\n","\n","# Split data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Encode categorical features\n","categorical_features = [\"country_group\", \"market_sector\"]\n","encoders = {}\n","for col in categorical_features:\n","    if col in X.columns:\n","        encoders[col] = LabelEncoder()\n","        X_train[col] = encoders[col].fit_transform(X_train[col].astype(str))\n","        X_test[col] = encoders[col].transform(X_test[col].astype(str))\n","\n","# Scale numeric features\n","scaler = StandardScaler()\n","numeric_features = [col for col in X.columns if col not in categorical_features]\n","X_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\n","X_test[numeric_features] = scaler.transform(X_test[numeric_features])\n","\n","# Train XGBoost model\n","xgb_model = xgb.XGBRegressor(\n","    n_estimators=300,\n","    learning_rate=0.1,  # Increased from 0.05\n","    max_depth=6,\n","    min_child_weight=1,\n","    subsample=0.8,\n","    colsample_bytree=0.8,\n","    gamma=0,\n","    reg_alpha=0.1,\n","    reg_lambda=1,\n","    random_state=42\n",")\n","xgb_model.fit(X_train, y_train)\n","\n","# Evaluate model\n","y_pred = xgb_model.predict(X_test)\n","y_pred_exp = np.expm1(y_pred)\n","y_test_exp = np.expm1(y_test)\n","print(f\"RÂ² Score: {r2_score(y_test_exp, y_pred_exp):.3f}\")\n","print(f\"MAE: ${mean_absolute_error(y_test_exp, y_pred_exp):,.2f}\")\n","print(f\"Median AE: ${median_absolute_error(y_test_exp, y_pred_exp):,.2f}\")\n","\n","# Prediction function\n","def predict_funding(new_data):\n","    new_data = new_data.copy()\n","    for feature in features:\n","        if feature not in new_data.columns:\n","            if feature in categorical_features:\n","                new_data[feature] = encoders[feature].classes_[0]\n","            else:\n","                new_data[feature] = 0\n","\n","    for col, encoder in encoders.items():\n","        if col in new_data.columns:\n","            new_data[col] = new_data[col].astype(str)\n","            for i, val in enumerate(new_data[col]):\n","                if val not in encoder.classes_:\n","                    new_data.loc[i, col] = encoder.classes_[0]\n","            new_data[col] = encoder.transform(new_data[col])\n","\n","    if numeric_features:\n","        new_data[numeric_features] = scaler.transform(new_data[numeric_features])\n","\n","    prediction_input = new_data[features]\n","    log_pred = xgb_model.predict(prediction_input)\n","    print(f\"Log prediction: {log_pred[0]}\")  # Debug output\n","    return np.expm1(log_pred)\n","\n","# Single startup prediction\n","def predict_single_startup(country_group, market_sector, funding_rounds,\n","                         years_since_founded, time_to_first_funding,\n","                         funding_duration, funding_velocity=None,\n","                         avg_funding_per_round=None, funding_per_year=None,\n","                         quick_funding=None, has_state=True):\n","    if funding_velocity is None:\n","        funding_velocity = funding_rounds / max(funding_duration, 0.1)\n","    if quick_funding is None:\n","        quick_funding = 1 if time_to_first_funding < 1 else 0\n","    if avg_funding_per_round is None:\n","        avg_funding_per_round = 1000000  # Default $1M per round\n","    if funding_per_year is None:\n","        funding_per_year = (avg_funding_per_round * funding_rounds) / max(years_since_founded, 0.1)\n","\n","    test_data = pd.DataFrame({\n","        \"country_group\": [country_group],\n","        \"market_sector\": [market_sector],\n","        \"funding_rounds\": [funding_rounds],\n","        \"years_since_founded\": [years_since_founded],\n","        \"time_to_first_funding\": [time_to_first_funding],\n","        \"funding_duration\": [funding_duration],\n","        \"funding_velocity\": [funding_velocity],\n","        \"avg_funding_per_round\": [avg_funding_per_round],\n","        \"funding_per_year\": [funding_per_year],\n","        \"quick_funding\": [quick_funding],\n","        \"has_state\": [has_state]\n","    })\n","\n","    prediction = predict_funding(test_data)\n","    return prediction[0]\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Inspect training data\n","    print(\"Training data funding stats:\")\n","    print(df_cleaned[\"funding_total_usd\"].describe())\n","\n","    # Test case\n","    prediction = predict_single_startup(\n","        \"USA\", \"Tech\", 3, 5, 0.5, 2.5\n","    )\n","    print(f\"Predicted funding: ${prediction:,.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fHFZVnsRMhAH","executionInfo":{"status":"ok","timestamp":1743424776153,"user_tz":-330,"elapsed":35306,"user":{"displayName":"Abhay singh","userId":"11040391237701590128"}},"outputId":"77657006-46e9-4252-ae24-88a77257c1dc"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["RÂ² Score: 0.965\n","MAE: $676,888.04\n","Median AE: $19,426.31\n","Training data funding stats:\n","count    4.084700e+04\n","mean     1.309155e+07\n","std      3.869312e+07\n","min      1.000000e+00\n","25%      3.500000e+05\n","50%      2.000000e+06\n","75%      9.858462e+06\n","max      6.851012e+08\n","Name: funding_total_usd, dtype: float64\n","Log prediction: 15.377968788146973\n","Predicted funding: $4,770,533.00\n"]}]}]}